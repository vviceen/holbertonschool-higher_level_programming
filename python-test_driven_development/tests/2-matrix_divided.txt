function that divides all elements of a matrix.
"""
tests
"""

>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> print(matrix_divided(matrix, 3))
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

>>> print(matrix)
[[1, 2, 3], [4, 5, 6]]

>>> print(matrix_divided(matrix, "test"))
Traceback (most recent call last):
...
TypeError: div must be a number

>>> print(matrix_divided(matrix, 0))
Traceback (most recent call last):
...
ZeroDivisionError: division by zero

>>> matrixtest2 = [[1, 2, 3], [4, 5, 6, 7]]
>>> print(matrix_divided(matrixtest2, 3))
Traceback (most recent call last):
...
TypeError: Each row of the matrix must have the same size

>>> print(matrixtest2)
[[1, 2, 3], [4, 5, 6, 7]]

>>> matrixtest3 = [[1, 2, 3], [4, 5, "test"]]
>>> print(matrix_divided(matrixtest3, 3))
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> print(matrixtest3)
[[1, 2, 3], [4, 5, 'test']]

>>> matrixtest4 = [1, 2, 3]
>>> print(matrix_divided(matrixtest4, 3))
Traceback (most recent call last):
...
TypeError: object of type 'int' has no len()

>>> print(matrix_divided(matrix))
Traceback (most recent call last):
...
TypeError: matrix_divided() missing 1 required positional argument: 'div'

>>> print(matrix_divided())
Traceback (most recent call last):
...
TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

>>> print(matrix_divided(matrix, (float('inf'))))
[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]

>>> print(matrix_divided(matrix, (float('NaN'))))
[[nan, nan, nan], [nan, nan, nan]]